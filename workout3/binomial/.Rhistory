is.integer(22.2)
is.integer(22)
2.3%%2
2.0%%2
%%2
check_trials(c(1,2))
sum(1)
c(2,1)<1
c(2,1)%%2
!1
check_success(2,3)
library(binomial)
check_success(2,3)
check_success(c(2,3,1.1),3)
truncate(1.)
truncate(1.1)
integer(1.2)
trunc(1.1)
trunc(1.7)
sqrt2
sqrt(2)
library(binomial)
bin_choose(5,2)
bin_choose(5,0)
bin_choose(5,1:#)
1
)
bin_choose(5,1:3)
bin_choose(5,1:5)
bin_choose(6,1:5)
library(binomial)
bin_probability(2,5,0.5)
bin_probability(2,5,0.5)
library(binomial)
bin_probability(2,5,0.5)
bin_probability(0:2,5,0.5)
library(binomial)
bin_probability(0:2,5,0.5)
bin_probability(55,100,0.45)
library(binomial)
bin_distribution(5,0.5)
library(binomial)
bin_distribution(5,0.5)
class(bin_distribution(5,0.5))
plot(bin_distribution(5,0.5))
library(binomial)
a <- bin_distribution(5,0.5)
plot(a)
a
library(binomial)
plot(a)
library(binomial)
plot(a)
library(binomial)
plot(a)
library(binomial)
plot(a)
a
library(binomial)
a
library(binomial)
plot(a)
library(binomial)
plot(a)
plot(a)
b <- c()
b[1]=2
b
library(binomial)
bin_cumulative(5,0.5)
library(binomial)
bin_cumulative(5,0.5)
library(binomial)
bin_cumulative(5,0.5)
library(binomial)
c <- bin_cumulative(5,0.5)
plot(c)
library(binomial)
plot(c)
d <- list(1,2,3,4)
names(d)
d <- list(a=1,b=2,3,4)
names(d)
d <- c(a=1,b=2)
d
names(d)
d <- list(a=1,b=2,3,4)
class(d)
d <- c(a=1,b=2)
class(d)
library(binomial)
bin_variable(5,0.5)
bin_variable(10,0.5)
bin_variable(10,0.3)
class(bin_variable(10,0.3))
library(binomial)
bin1 <- bin_variable(10,0.3)
bin1
summary(bin1)
a <- c(1,1)
type(a)
length(a)
1!=1
source('~/binomial/tests/testthat/test_checker.R')
#test function check_prob()
test_that("check if check_prob() behaves as expected",
expect_true(check_prob(0.3)),
expect_error(check_prob(-0.777)),
expect_error(check_prob(c(0.1,0.1))),
expect_error(check_prob("one")))
#test function check_success
test_that("check if check_success() behaves as expected",{
expect_true(check_success(c(1,2),4))
expect_true(check_success(3,5))
expect_error(check_success(1.1,4))
expect_error(check_success(c(4,5,7),3))})
devtools::use_testthat()
install.packages(devtools)
install.packages("devtools")
devtools::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
bin_distribution(5,0.5)
library(binomial)
library(binomial)
library(binomial)
install.packages("testthat")
install.packages("testthat")
library(binomial)
test_that("check if check_prob() behaves as expected",
expect_true(check_prob(0.3)),{
expect_error(check_prob(-0.777))
expect_error(check_prob(c(0.1,0.1)))
expect_error(check_prob("one"))})
library(testthat)
library(cointoss)
test_check("binomial")
devtools::test()
library(binomial)
library(testthat)
library(binomial)
test_check("binomial")
devtools::test()
test_that("check if check_prob() behaves as expected",
expect_true(check_prob(0.3)),{
expect_error(check_prob(-0.777))
expect_error(check_prob(c(0.1,0.1)))
expect_error(check_prob("one"))})
test_that("check_prob with ok arguments", {
expect_true(check_prob(1))
expect_true(check_prob(0.4))
expect_true(check_prob(0.112))
})
"k">1
a <- "k"
a>1
a<1
type(0.3)
class(0.3)
class(c(1,2))
typeof(1)
typeof(1.2)
typeof(1z)
typeof(1Z)
typeof(1L)
typeof(1L)=="double"
is.numeric(1)
.3
is.numeric(1.3)
library(binomial)
library(binomial)
devtools::test()
devtools::test()
factorial(1.1)
typeof(bin_distribution(1,1))
class(bin_distribution(1,1))
library(binomial)
library(testthat)
1/0
library(binomial)
aux_mode(10,0.3)
aux_mode(3,0.5)
library(binomial)
aux_mode(3,0.5)
aux_mode(3,0.5)
aux_mode(3,0.5)
aux_mode(4,0.5)
aux_mode(1,0.5)
library(binomial)
aux_mode(3,0.5)
aux_mode(3,0.4)
aux_mode(3,0.5)
aux_mode(4,0.5)
(3+1)*0.5%%1
(4*0.5)%%1
aux_mode(4,0.5)
aux_mode(4,0.5)
aux_mode(3,0.5)
aux_mode(3,0.5)
aux_mode(3,0.5)
library(binomial)
aux_mode(3,0.5)
library(binomial)
aux_mode(3,0.5)
aux_kurtosis(10,0.3)
aux_skewness(10,0.3)
scipen(50)
library(ggplot2)
scipen
devtools::use_vignette("introduction")
library(binomial)
devtools::document()
